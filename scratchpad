r1 = [100,100,100,100,100,100,100,100,100,100,100,100,100];
r1_standard = [200];
r1_hhkb = [100,100];

r2 = [150,100,100,100,100,100,100,100,100,100,100,100,100];
r2_ansi = [150];
r2_iso = [1501];

r3_standard = [175];
r3_stepped = [1751];
r3 = [100,100,100,100,100,100,100,100,100,100,100];
r3_ansi = [225];
r3_iso = [100];

r4_ansi = [225];
r4_iso = [125, 100];
r4 = [100,100,100,100,100,100,100,100,100];
r4_ansi2 = [100,275];
r4_splitshift = [100,175,100];
r4_bigq = [175,100,100];

r5 = [125,125,125];
r5_275 = [275,125,225];
r5_225 = [225,125,275];
r5_625 = [625];
r5_standard = [125,125,125,125];
r5_singles = [100,100,100,100,100];

tr1 = ['ECS','1','2','3','4','5','6','7','8','9','0','-','='];
tr1_standard = ['BACKSPACE'];
tr1_hhkb = ['PRINT','PAUSE'];

tr2 = ['TAB','Q','W','E','R','T','Y','U','I','O','P','[',']'];
tr2_ansi = ['\\'];
tr2_iso = ['ENTER ISO'];

tr3_standard = ['CAPS'];
tr3_stepped = ['CAPS STEPPED'];
tr3 = ['A','S','D','F','G','H','J','K','L',';','\''];
tr3_ansi = ['ENTER'];
tr3_iso = ['#'];

tr4_ansi = ['SHIFT'];
tr4_iso = ['SHIFT ISO', '\\'];
tr4 = ['Z','X','C','V','B','N','M',',','.'];
tr4_ansi2 = ['/','SHIFT'];
tr4_splitshift = ['/','SHIFT','FN'];
tr4_bigq = ['SHIFT','UP','FN'];

tr5 = ['CTRL','SYS','ALT'];
tr5_275 = ['ENTER','FN','SPACE'];
tr5_225 = ['ENTER','FN','SPACE'];
tr5_625 = ['SPACE'];
tr5_standard = ['ALT','SYS','MENU','CTRL'];
tr5_singles = ['ALT','CTRL','LEFT','DOWN','RIGHT'];



function buildLayout() {
  var backspace = document.getElementById("backspace").value;
  var enter = document.getElementById("enter").value;
  var caps = document.getElementById("caps").value;
  var left_shift = document.getElementById("left_shift").value;
  var right_shift = document.getElementById("right_shift").value;
  var spacebar = document.getElementById("spacebar").value;
  var bottom_right = document.getElementById("bottom_right").value;

  var lr1 = [];
  var lr2 = [];
  var lr3 = [];
  var lr4 = [];
  var lr5 = [];

  var layout = [];

  if (backspace == "standard") {
    lr1 = r1.concat(r1_standard);
  } else {
    lr1 = r1.concat(r1_hhkb);
  }

  if (enter == "ansi") {
    lr2 = r2.concat(r2_ansi);
  } else {
    lr2 = r2.concat(r2_iso);
  }

  if (caps == "normal") {
    lr3 = lr3.concat(r3_standard);
  } else {
    lr3 = lr3.concat(r3_stepped);
  }

  lr3 = lr3.concat(r3);

  if (enter == "ansi") {
    lr3 = lr3.concat(r3_ansi);
  } else {
    lr3 = lr3.concat(r3_iso);
  }

  if (left_shift == "ansi") {
    lr4 = lr4.concat(r4_ansi);
  } else {
    lr4 = lr4.concat(r4_iso);
  }

  lr4 = lr4.concat(r4);

  if (right_shift == "ansi") {
    lr4 = lr4.concat(r4_ansi2);
  } else if (right_shift == "split") {
    lr4 = lr4.concat(r4_splitshift);
  } else {
    lr4 = lr4.concat(r4_bigq);
  }

  lr5 = r5;

  if (spacebar == "standard") {
    lr5 = lr5.concat(r5_625);
  } else if (spacebar == "split275") {
    lr5 = lr5.concat(r5_275);
  } else {
    lr5 = lr5.concat(r5_225);
  }

  if (bottom_right == "standard") {
    lr5 = lr5.concat(r5_standard);
  } else {
    lr5 = lr5.concat(r5_singles);
  }

  layout.push(lr1);
  layout.push(lr2);
  layout.push(lr3);
  layout.push(lr4);
  layout.push(lr5);

  return layout;
}

function buildTemplate() {
  var backspace = document.getElementById("backspace").value;
  var enter = document.getElementById("enter").value;
  var caps = document.getElementById("caps").value;
  var left_shift = document.getElementById("left_shift").value;
  var right_shift = document.getElementById("right_shift").value;
  var spacebar = document.getElementById("spacebar").value;
  var bottom_right = document.getElementById("bottom_right").value;

  var lr1 = [];
  var lr2 = [];
  var lr3 = [];
  var lr4 = [];
  var lr5 = [];

  var layout = [];

  if (backspace == "standard") {
    lr1 = tr1.concat(tr1_standard);
  } else {
    lr1 = tr1.concat(tr1_hhkb);
  }

  if (enter == "ansi") {
    lr2 = tr2.concat(tr2_ansi);
  } else {
    lr2 = tr2.concat(tr2_iso);
  }

  if (caps == "normal") {
    lr3 = lr3.concat(tr3_standard);
  } else {
    lr3 = lr3.concat(tr3_stepped);
  }

  lr3 = lr3.concat(tr3);

  if (enter == "ansi") {
    lr3 = lr3.concat(tr3_ansi);
  } else {
    lr3 = lr3.concat(tr3_iso);
  }

  if (left_shift == "ansi") {
    lr4 = lr4.concat(tr4_ansi);
  } else {
    lr4 = lr4.concat(tr4_iso);
  }

  lr4 = lr4.concat(tr4);

  if (right_shift == "ansi") {
    lr4 = lr4.concat(tr4_ansi2);
  } else if (right_shift == "split") {
    lr4 = lr4.concat(tr4_splitshift);
  } else {
    lr4 = lr4.concat(tr4_bigq);
  }

  lr5 = tr5;

  if (spacebar == "standard") {
    lr5 = lr5.concat(tr5_625);
  } else if (spacebar == "split275") {
    lr5 = lr5.concat(tr5_275);
  } else {
    lr5 = lr5.concat(tr5_225);
  }

  if (bottom_right == "standard") {
    lr5 = lr5.concat(tr5_standard);
  } else {
    lr5 = lr5.concat(tr5_singles);
  }

  layout.push(lr1);
  layout.push(lr2);
  layout.push(lr3);
  layout.push(lr4);
  layout.push(lr5);

  return layout;
}

function updateLayoutOutput() {
  var layout = buildLayout();
  var template = buildTemplate();
  var output = "";

  for (l in layout) {
    output += "<div>"+layout[l]+"</div>";
  }

  output += "<div>-----</div>";

  for (l in template) {
    output += "<div>"+template[l]+"</div>";
  }

  document.getElementById("output").innerHTML = output;
}



<html>
<head></head>
<body>
  <form>
    Backspace
    <select id="backspace" onchange="updateLayoutOutput()">
      <option value="standard">Standard</option>
      <option value="hhkb">HHKB</option>
    </select>
    Enter
    <select id="enter" onchange="updateLayoutOutput()">
      <option value="ansi">ANSI</option>
      <option value="iso">ISO</option>
    </select>
    Caps Lock
    <select id="caps" onchange="updateLayoutOutput()">
      <option value="normal">Normal</option>
      <option value="stepped">Stepped</option>
    </select>
    Left Shift
    <select id="left_shift" onchange="updateLayoutOutput()">
      <option value="ansi">ANSI</option>
      <option value="iso">ISO</option>
    </select>
    Right Shift
    <select id="right_shift" onchange="updateLayoutOutput()">
      <option value="ansi">ANSI</option>
      <option value="split">Split</option>
      <option value="bigq">Big Q</option>
    </select>
    Spacebar
    <select id="spacebar" onchange="updateLayoutOutput()">
      <option value="standard">Standard</option>
      <option value="split275">Split 275</option>
      <option value="split225">Split 225</option>
    </select>
    Bottom Right
    <select id="bottom_right" onchange="updateLayoutOutput()">
      <option value="standard">Standard</option>
      <option value="singles">Singles</option>
    </select>
  </form>

  <div id="output">
  </div>
  <script src="file:///Users/f4746ib/Documents/layout_builder.js"></script>
</body>
</html>




/**** ZONE BUILDER ****/
zones = {
backspace:{name:'Backspace', choices:[{code:'standard', name:'Standard'}, {code:'hhkb', name:'HHKB'}]},
enter: {name:'Enter', choices:[{code:'ansi', name:'ANSI'}, {code:'iso', name:'ISO'}]},
caps: {name:'Caps', choices:[{code:'normal', name:'Normal'}, {code:'stepped', name:'Stepped'}]},
left_shift: {name:'Left Shift', choices:[{code:'ansi', name:'ANSI'}, {code:'iso', name:'ISO'}]},
right_shift: {name:'Right Shift', choices:[{code:'ansi', name:'ANSI'}, {code:'split', name:'Split'}, {code:'bigq', name:'Arrow'}]},
spacebar: {name:'Spacebar', choices:[{code:'standard', name:'Standard'}, {code:'split275', name:'Split 275'}, , {code:'split225', name:'Split 225'}]},
bottom_right: {name:'Bottom Right', choices:[{code:'standard', name:'Standard'}, {code:'singles', name:'Singles'}]},
}

zoneSelections = {
  backspace: 'standard',
  enter: 'ansi',
  caps: 'normal',
  left_shift: 'ansi',
  right_shift: 'ansi',
  spacebar: 'standard',
  bottom_right: 'standard',
}

selectTemplate = '<label class="context-menu--select--label">{{LABEL}}:<select id="{{ID}}" class="context-menu--select--select" v-model="zoneSelections[{{ID}}]" @change="changeLayoutZone"><option v-for="(index, choice) in zones[{{ID}}].choices" v-bind:value="choice.code">{{ choice.name }}</option></select></label>';
var html = '';
for (z in zones) {
  html += selectTemplate.split('{{LABEL}}').join(zones[z].name).split('{{ID}}').join(z);
}
